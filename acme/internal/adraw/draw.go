package adraw

import (
	"bwsd.dev/plan9/draw"
	"bwsd.dev/plan9/draw/frame"
)

var (
	Display *draw.Display

	BlackDefault *draw.Image
	TagCols      [frame.NCOL]*draw.Image
	TextCols     [frame.NCOL]*draw.Image

	Button       *draw.Image
	ColButton    *draw.Image
	ModButton    *draw.Image
	Button2Color *draw.Image
	Button3Color *draw.Image
)

// The draw.Color constants below define the default dark color scheme for acme.
const (
	Black  draw.Color = 0x1D1F2100
	White  draw.Color = 0xC5C8C600
	Yellow draw.Color = 0xD2992200
	Blue   draw.Color = 0x81A2BE00
	Grey   draw.Color = 0x30303000
)

func Init() {
	if BlackDefault == nil {
		BlackDefault, _ = Display.AllocImage(draw.Rect(0, 0, 1, 1),
			Display.ScreenImage.Pix, true, Black)
	}
	if TagCols[frame.BACK] == nil {
		TagCols[frame.BACK] = Display.AllocImageMix(Grey, Grey)
		TagCols[frame.HIGH], _ = Display.AllocImage(draw.Rect(0, 0, 1, 1),
			Display.ScreenImage.Pix, true, Blue)
		TagCols[frame.BORD], _ = Display.AllocImage(draw.Rect(0, 0, 1, 1),
			Display.ScreenImage.Pix, true, White)
		TagCols[frame.TEXT] = Display.White
		TagCols[frame.HTEXT] = Display.AllocImageMix(White, draw.NoFill)

		TextCols[frame.BACK] = Display.AllocImageMix(Black, Black)
		TextCols[frame.HIGH], _ = Display.AllocImage(draw.Rect(0, 0, 1, 1),
			Display.ScreenImage.Pix, true, Blue)
		TextCols[frame.BORD], _ = Display.AllocImage(draw.Rect(0, 0, 1, 1),
			Display.ScreenImage.Pix, true, Blue)
		TextCols[frame.TEXT] = Display.White
		TextCols[frame.HTEXT] = Display.AllocImageMix(White, draw.NoFill)
	}

	r := draw.Rect(0, 0, Scrollwid()+ButtonBorder(), Font.Height+1)
	if Button != nil && r == Button.R {
		return
	}

	if Button != nil {
		Button.Free()
		ModButton.Free()
		ColButton.Free()
	}

	Button, _ = Display.AllocImage(r, Display.ScreenImage.Pix, false, draw.NoFill)
	Button.Draw(r, TagCols[frame.BACK], nil, r.Min)
	r.Max.X -= ButtonBorder()
	Button.Border(r, ButtonBorder(), TagCols[frame.BORD], draw.ZP)

	r = Button.R
	ModButton, _ = Display.AllocImage(r, Display.ScreenImage.Pix, false, draw.NoFill)
	ModButton.Draw(r, TagCols[frame.BACK], nil, r.Min)
	r.Max.X -= ButtonBorder()
	ModButton.Border(r, ButtonBorder(), TagCols[frame.BORD], draw.ZP)
	r = r.Inset(ButtonBorder())
	tmp, _ := Display.AllocImage(draw.Rect(0, 0, 1, 1), Display.ScreenImage.Pix, true, Blue)
	ModButton.Draw(r, tmp, nil, draw.ZP)
	tmp.Free()

	r = Button.R
	ColButton, _ = Display.AllocImage(r, Display.ScreenImage.Pix, false, Yellow)

	Button2Color, _ = Display.AllocImage(r, Display.ScreenImage.Pix, true, Yellow)
	Button3Color, _ = Display.AllocImage(r, Display.ScreenImage.Pix, true, Blue)
}

var BoxCursor = draw.Cursor{
	Point: draw.Point{-7, -7},
	White: [...]uint8{
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xF8, 0x1F, 0xF8, 0x1F, 0xF8, 0x1F,
		0xF8, 0x1F, 0xF8, 0x1F, 0xF8, 0x1F, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	},
	Black: [...]uint8{
		0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE,
		0x70, 0x0E, 0x70, 0x0E, 0x70, 0x0E, 0x70, 0x0E,
		0x70, 0x0E, 0x70, 0x0E, 0x70, 0x0E, 0x70, 0x0E,
		0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x00, 0x00,
	},
}

var BoxCursor2 = draw.Cursor2{
	Point: draw.Point{-15, -15},
	White: [...]uint8{
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xC0, 0x03, 0xFF,
		0xFF, 0xC0, 0x03, 0xFF,
		0xFF, 0xC0, 0x03, 0xFF,
		0xFF, 0xC0, 0x03, 0xFF,
		0xFF, 0xC0, 0x03, 0xFF,
		0xFF, 0xC0, 0x03, 0xFF,
		0xFF, 0xC0, 0x03, 0xFF,
		0xFF, 0xC0, 0x03, 0xFF,
		0xFF, 0xC0, 0x03, 0xFF,
		0xFF, 0xC0, 0x03, 0xFF,
		0xFF, 0xC0, 0x03, 0xFF,
		0xFF, 0xC0, 0x03, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
	},
	Black: [...]uint8{
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x3F, 0xFF, 0xFF, 0xFC,
		0x3F, 0xFF, 0xFF, 0xFC,
		0x3F, 0xFF, 0xFF, 0xFC,
		0x3F, 0xFF, 0xFF, 0xFC,
		0x3F, 0xFF, 0xFF, 0xFC,
		0x3F, 0xFF, 0xFF, 0xFC,
		0x3F, 0x00, 0x00, 0xFC,
		0x3F, 0x00, 0x00, 0xFC,
		0x3F, 0x00, 0x00, 0xFC,
		0x3F, 0x00, 0x00, 0xFC,
		0x3F, 0x00, 0x00, 0xFC,
		0x3F, 0x00, 0x00, 0xFC,
		0x3F, 0x00, 0x00, 0xFC,
		0x3F, 0x00, 0x00, 0xFC,
		0x3F, 0x00, 0x00, 0xFC,
		0x3F, 0x00, 0x00, 0xFC,
		0x3F, 0x00, 0x00, 0xFC,
		0x3F, 0x00, 0x00, 0xFC,
		0x3F, 0x00, 0x00, 0xFC,
		0x3F, 0x00, 0x00, 0xFC,
		0x3F, 0x00, 0x00, 0xFC,
		0x3F, 0x00, 0x00, 0xFC,
		0x3F, 0xFF, 0xFF, 0xFC,
		0x3F, 0xFF, 0xFF, 0xFC,
		0x3F, 0xFF, 0xFF, 0xFC,
		0x3F, 0xFF, 0xFF, 0xFC,
		0x3F, 0xFF, 0xFF, 0xFC,
		0x3F, 0xFF, 0xFF, 0xFC,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
	},
}

func Scrollwid() int    { return Display.Scale(12) }
func Scrollgap() int    { return Display.Scale(4) }
func Margin() int       { return Display.Scale(4) }
func Border() int       { return Display.Scale(1) }
func ButtonBorder() int { return Display.Scale(2) }
